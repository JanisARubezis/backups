Kartoanas algoritmi
	https://www.toptal.com/developers/sorting-algorithms
Naivā metode
	Meklē mazāko/atbilstošāko elementu un to pārvieto uz pirmo vietu nesakārtotajā daļā, tad to apzīmē kā sakartoto daļu.
Burbuļu/apmaiņas metode
	Salīdzina ar pa kreisi esošo un ja palabi esošais ir lielāks, tad apmainās vietām un iet līdz galam un sāk no jauna.
Šella metode


PD
1. variants

------------------------------------------------------------------------

Replit

------------------------------------------------------------------------

MI (AI)

(.py)
x = open("dati.txt", 'w')
saturs = x.write("Ziema ir prom.")
x.close()

y = open("dati.txt")
saturs = y.read()
y.close()

print(saturs)

------------------------------------------------------------------------
strip() noņem rakstzīmes 

loģiskie operatori
and or

------------------------------------------------------------------------
x = str(3) #simbols (neder matem, der vardiem
y = int(3) #integer (veseli sk
z = float(3) #mantisu un 10 pakāpi (sakitilis at kommatu

inport math #papildus matem funkcijas

x=math.sqrt(64)

------------------------------------------------------------------------
x= bool(2) # true/false

------------------------------------------------------------------------
13.05.21
Kļūdu lab.

nelieto latviešu burtus mainīgajos
------------------------------------------------------------------------
Darbs ar failiem
134-136lpp konspekts

intertool - funkcija kas rad iteratorus efektīvai savienošanai

/n - jauna rindkopa

def x(
x("abc.txt") -makes a seperet file

from shutil import copyfile
copyfile("from", "where")

------------------------------------------------------------------------
konspekts (134-136)

Galvenās darbības ar failu:
	reading
	writing
Lai veiktu darbības faila tas ir nosākiuma jāatver(open) un pēc tam jāaizver(close)
Failu raksta:
	absalūti (C:/src/...) #visā ierīcē
	relatīvi (fname.txt) #programas folderī

f = open("fname", "mode"
mode:
	r- default
	w- read
	a- open after edit
	rb, wb, ab- in binary
	r+, w+, a+ - both
	rb+, ... - both in binary
f.close()
if wierd letters
f= open("fname", encoding"utf-8")

‘·’- gap
‘¶’ - "Enter key"
‘§’ - end of the file

------------------------------------------------------------------------
konspekts (25-44)

goal
	key words(int, return, import...)
	id
	literals(konstats)
		nr
		nr with comma
		symbol(text)
		true false
	operation symbol
id- name of veriable, function etc.
keywords- pre-defined words (and, as, for, def...)
literals- veriables value
intialization- veriables first value
	a= None (empty ver.)
operator- type of codes work(name of the codes task)
	arithmatich
	logic
	compear
	asign
priority- what to do first("Tab key")

Python constraction
	head
	blocks
	pre-write
		simple(one set of function)
		compound(function in a function)

data types
	nr
		int
		float
	logic
	str

assignment- giving veriable a value
expresions- calculation with order ("()";^;/*:+-))
nr expresions- expresions with "import math"

Input output (print(), input())

Branching
	what is under what ("Tab key")
		order of work
logic expresions- expresions with "<, <=, >, >=, !=, =="
		(result: true, flase)
---------------------------------------------------------
Versiju kontrole

viens no pašlaik izplatītākais ver. control rīks ir = GIT

repozitorjs-datu telpa
dakšošana(fork)-darba clonēšana un darba contributions
commit-git iekšā esoša versijas sistēmu saglabājums

Līdzība
gits-local
github-cloud
Atšķirības
gits-nonliniar work flow (works for code)
github-tīmekļa mitināšanas pakalpojums git-am (works for code distributing/access)

---------------------------------------------------------
python
write and read from a file               (MG.134.lpp)

files=open('name', 'methods')
methods: r- read, w- write(delete before writing), a- append (w-(but dousn't delete plus crate a file if it doousn't exist) x- create

---------------------------------------------------------
Bruņurupucis(turtle)

s=turtle.getscreen() - get a display
t=turtle.Turtle() - get canva 
cord system = mathmatich norm (center 0,0 and has -x.-y)
t.circle(r) - start position is on the circle line

darw is with the variable.comand
the rest with turtle.comand
line thicknes with t.pensize(nr)
t.pen(comands)

t.penup() -stop drawing when moveing)
t.pendown() -continue
t.clear - ctrl+z
t.reset - dealte all

--------------------------------------------------------
MatPlotLib (math plot liblary)

markers o; v; p;
line types :r; -.r; --r
	linestyle= "example" -alternet way
ms = nr -marker size
mec = 'color' - outline color
mfc = 'color' - marker color
linewidth = 'nr'

extra lines
	n arrays
	n plt.plot
	
	x1-n, y1-n arrays
	plt.plot([x1, y1, xn, yn])
plt.show() draw the graph (always included pref. at the end)
plt.title('example')
plt.xlabel('on x axes')
plt.ylabel('on y axes') - 

font1 = {'family':'serit','color':'red'} - costom font
plt.title/label ('title for the next graph', fontdict= font1, loc= 'left')
plt.subtitle ('title for all graphs')

plt.grid(color='example', linestyle= , linewidth) - ads grid for eas of reading thr graph 

multiple graphs
	plt.subplot (size, stack, order nr)
		size- heading princip of smaller nr the bigger graph
		stack- 1 vertical, 2horizontal
		

color palet in data display/visualation
	plt.colorbar - heat map, needs 3rd arrey for one graph
	
line graphs
	x=np.arrey(["label1", "apples", 'c'])
	plt.bar(x,y) - barh(horizontal), bar (vertical)
	plt.bar(x,y, color='r')

histograms
	x=np.random.normal(170, 10, 250)
	plt.hist(x)

pie garphs
	plt.pie('array') - start x axis (3 o'clock), move anti-clockwise
	labels
	explode - arrey with nr, distance that part pulled out
	
draw function graphs
	import math

full list of propaties - https://matplotlib.org/2.0.2/users/pyplot_tutorial.html
